<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>mwcz.org</title>
    <link>http://mwcz.org/blog</link>
    <description>I finally created a blog.</description>
    <pubDate>Fri, 18 Nov 2011 00:52:18 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Bouncey returns - more canvas physics</title>
      <link>http://mwcz.org/blog/2011/11/17/bouncey-returns---more-canvas-physics</link>
      <pubDate>Thu, 17 Nov 2011 22:25:00 EST</pubDate>
      <category><![CDATA[canvas]]></category>
      <category><![CDATA[javascript]]></category>
      <category><![CDATA[physics]]></category>
      <category><![CDATA[html5]]></category>
      <guid>b'2xt0h5v9PdQpOWIQqUDpRdUg6RE='</guid>
      <description>Bouncey returns - more canvas physics</description>
      <content:encoded><![CDATA[<p>This is a slightly upgraded version of the physics demo I showed in my <a href="/blog/2011/11/17/bouncey---canvas-physics/">last post</a>.</p>
<p>It is still...</p>
<p><quote>"a buggy, rudimentary, just-for-fun javascript physics simulator."</quote></p>
<p>This version has:</p>
<ul>
<li>pre-defined initial states</li>
<li>gravity</li>
<li>friction</li>
</ul>
<p>It still has the "clinging" bug.  I know how to fix it, but didn't deem it important enough to spend time on it. :)</p>
<p>The <a href="https://github.com/mwcz/bouncey/blob/master/bounce.html">code</a> is well commented, so feel free to hack on it.</p>
<p>Click on one of the initial states to begin the simulation.</p>
<style type="text/css">
#cnvs {
    margin: 0 auto;
    border: 1px solid black;
    -webkit-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
       -moz-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
         -o-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
            box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
}
</style>

<script type="text/javascript" src="/js/008/bouncey.js"></script>

<p>Initial states:
<button onclick="RANDOM();">Random</button>
<button onclick="POOL();">POOL</button>
<button onclick="HEAD_ON_COLLISION();">HEAD_ON_COLLISION</button></p>
<p><canvas id="cnvs" width="500" height="375"> 
    Sorry, your browser does not support HTML5 canvas.  Lame.
</canvas> </p>
<p><button onclick="paused++;paused%=2;">Pause</button> </p>
<pre>
  velocity sum: <span id="txt_velocity_sum">NONE</span>
x velocity sum: <span id="txt_velocity_sum_x">NONE</span>
y velocity sum: <span id="txt_velocity_sum_y">NONE</span>
</pre>

<p>(The POOL initial state reproduces the clinging bug.)</p>]]></content:encoded>
    </item>
    <item>
      <title>Bouncey - canvas physics</title>
      <link>http://mwcz.org/blog/2011/11/17/bouncey---canvas-physics</link>
      <pubDate>Thu, 17 Nov 2011 21:25:00 EST</pubDate>
      <category><![CDATA[canvas]]></category>
      <category><![CDATA[javascript]]></category>
      <category><![CDATA[physics]]></category>
      <category><![CDATA[html5]]></category>
      <guid>b'lme0L3L_sUuiXWqzNi0W4eTQuUQ='</guid>
      <description>Bouncey - canvas physics</description>
      <content:encoded><![CDATA[<p>This is Bouncey.  It's a simple physics demo I wrote in early/mid 2011, with some contributions and bugfixes from my good friend Greg Gardner.</p>
<p>The description for <a href="https://github.com/mwcz/bouncey">bouncey's github repo</a> is:</p>
<p><quote>"a buggy, rudimentary, just-for-fun javascript physics simulator."</quote></p>
<p>It covers <a href="http://en.wikipedia.org/wiki/Newton&apos;s_laws_of_motion">Newton's laws of motion</a>.</p>
<style type="text/css">
#cnvs {
    margin: 0 auto;
    border: 1px solid black;
    -webkit-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
       -moz-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
         -o-box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
            box-shadow: 0px 0px 3px rgba( 0, 0, 0, 0.7 );
}
</style>

<script type="text/javascript" src="/js/007/bouncey.js"></script>

<script type="text/javascript">

window.onload = function() {

canvas_element        = document.getElementById('cnvs');
    canvas_element.width  = W;
    canvas_element.height = H;

canvas = canvas_element.getContext('2d');

// create some squares with random velocities in the center of the canvas
    // objects are stored in the format 
    //      [ X, Y, X_velocity, Y_velocity, width, height, [R,G,B] ]
    var x, y, w, h, v_x, v_y, r, g, b, new_obj;

// calculate all the possible initial y positions
    y_positions = [];
    for( var i = OBJ_HEIGHT; i < H - OBJ_HEIGHT; i += 2 * OBJ_HEIGHT )
        y_positions.push( i );

// calculate all the possible initial x positions
    x_positions = [];
    for( var i = OBJ_WIDTH; i < W - OBJ_WIDTH; i += 2 * OBJ_WIDTH )
        x_positions.push( i );

/*
    */
    for( var i = 0; i < 40; ++i ) {

// create values for the object
        x   = x_positions[ i % x_positions.length ];
        y   = y_positions[ Math.floor( i / x_positions.length ) % y_positions.length ];
        v_x = Math.random() * OBJ_MAX_VELOCITY*2 - OBJ_MAX_VELOCITY;
        v_y = Math.random() * OBJ_MAX_VELOCITY*2 - OBJ_MAX_VELOCITY;
        r   = Math.floor( Math.random() * 200 + 55 ); // random value 55..255
        g   = Math.floor( Math.random() * 200 + 55 );
        b   = Math.floor( Math.random() * 200 + 55 );

// add the object to the scene
        var color = 'rgb(' + r + ',' + g + ',' + b + ')';
        var new_obj = new Circle( x, y, OBJ_R, v_x, v_y, color );

objs.push( new_obj );
    }

setInterval( make_frame, PERIOD );

}

</script>

<p><button onclick="paused++;paused%=2;">Pause</button> </p>
<p><canvas id="cnvs" width="500" height="375"> 
    Sorry, your browser does not support HTML5 canvas.  Lame.
</canvas> </p>]]></content:encoded>
    </item>
    <item>
      <title>HTML5 canvas point operations</title>
      <link>http://mwcz.org/blog/2011/11/17/html5-canvas-point-operations</link>
      <pubDate>Thu, 17 Nov 2011 19:25:00 EST</pubDate>
      <category><![CDATA[color]]></category>
      <category><![CDATA[canvas]]></category>
      <category><![CDATA[image processing]]></category>
      <category><![CDATA[html5]]></category>
      <guid>b'2uP1qAr8SfbHgvsg46MdoeZsgcc='</guid>
      <description>HTML5 canvas point operations</description>
      <content:encoded><![CDATA[<p>This is the last demo I made using <a href="https://github.com/mwcz/jsimage">JSImage</a>.  I created it some time around 2009-2010.  At the time, I had checked out an <a href="http://www.amazon.com/Digital-Image-Processing-Algorithmic-Introduction/dp/1846283795">imaging book</a> from my university's library at least ten times.  Most of the exercises in that book I implemented in Python using <a href="http://www.pythonware.com/products/pil/">PIL</a>, but point operations were simple enough to port to JavaScript quickly.</p>
<p>Point operations are image alterations that affect all pixels equally.  Other operations, like blurring for example, each result pixel depends on adjacent pixels.</p>
<p>This demonstrates changing contrast, value, saturation, hue, color inversion, and threshold point operations.  Note that there is a bug with increasing value and increasing saturation which I never got around to fixing.</p>
<script type="text/javascript" src="/js/005/jquery.min.js"></script> 
<script type="text/javascript" src="/js/005/jsimage.js"></script> 
<script type="text/javascript" src="/js/005/colorspace.js"></script>

<script type="text/javascript">

var img0; // make img0 public so I can play with it in firebug more easily

window.onload = function() {
        img0 = new JSImage( "img0", "/img/005/bee.jpg" );
    }

</script>

<p><canvas id="img0">your browser does not support canvas</canvas> </p>
<table cellpadding="4" cellspacing="0"> 
<tr>

<th>Value</th> 
    <th>Contrast</th> 
    <th>Saturation</th> 
    <th>Hue</th> 
    <th>Invert</th> 
    <th>Threshold</th> 
</tr>

<tr> 
    <td> 
        <!-- using onmousedown instead of onclick because it improves perceived performance.
             definitely an accessibility problem, though --> 
        <input type="image" src="/img/005/arrow_up.png" onmousedown="img0.value( img0.canvas, 10 )" /> 
        <input type="image" src="/img/005/arrow_down.png" onmousedown="img0.value( img0.canvas, -10 )" /> 
    </td> 
    <td> 
        <input type="image" src="/img/005/arrow_up.png" onmousedown="img0.contrast( img0.canvas, 1.1)" /> 
        <input type="image" src="/img/005/arrow_down.png" onmousedown="img0.contrast( img0.canvas, 0.9)" /> 
    </td> 
    <td> 
        <input type="image" src="/img/005/arrow_up.png" onmousedown="img0.saturation( img0.canvas, 25 )" /> 
        <input type="image" src="/img/005/arrow_down.png" onmousedown="img0.saturation( img0.canvas, -25 )" /> 
    </td> 
    <td> 
        <input type="image" src="/img/005/arrow_up.png" onmousedown="img0.hue( img0.canvas, 20)" /> 
        <input type="image" src="/img/005/arrow_down.png" onmousedown="img0.hue( img0.canvas, -20)" /> 
    </td> 
    <td> 
        <button type="button" onmousedown="img0.invert()">invert</button> 
    </td> 
    <td> 
        <button type="button" onmousedown="img0.threshold( img0.canvas, document.getElementById('t').value )">threshold</button> 
        <br /> 
        <input type="text" value="127" maxlength="3" size="3" id="t" /> 
    </td> 
</tr>

</table>]]></content:encoded>
    </item>
    <item>
      <title>HTML5 canvas area selection averaging</title>
      <link>http://mwcz.org/blog/2011/11/16/html5-canvas-area-selection-averaging</link>
      <pubDate>Wed, 16 Nov 2011 18:25:00 EST</pubDate>
      <category><![CDATA[color]]></category>
      <category><![CDATA[canvas]]></category>
      <category><![CDATA[html5]]></category>
      <guid>b'C9TlJjRziEuKR3rVgcQw66ug5QQ='</guid>
      <description>HTML5 canvas area selection averaging</description>
      <content:encoded><![CDATA[<p>This is a demo from late 2009.  It's an extension of the single-pixel <a href="/blog/2011/11/16/html5-canvas-eyedropper/">eyedropper</a> I wrote previously.</p>
<p>It's powered by an early version of an old JS toolkit I wrote called JSImage.  The latest version is available at my <a href="https://github.com/mwcz/jsimage">JSImage github repo</a>.  Don't be fooled by the 2011 commits, those are just artifacts from svn-&gt;git migration.  No guarantees that the histo's are actually correct. :)</p>
<p>I used an old version of a rectangular selection tool called marquee.  I believe it's still located <a href="http://marqueetool.net/">here</a> but I can't be totally sure that's the same project.</p>
<p>Click, drag, and taste the magic. :|</p>
<link rel="stylesheet" type="text/css" href="/css/004/marker.css" /> 
<script type="text/javascript" src="/js/004/marquee/prototype_reduced.js"></script> 
<script type="text/javascript" src="/js/004/marquee/rectmarquee.js"></script> 
<script type="text/javascript" src="/js/004/JSImage.js"></script>

<script type="text/javascript">

window.onload = function() {

img0 = new JSImage( "c0", "/img/004/kazoo.png" );
    setTimeout("img0.draggable();",100); // enable the selection

}

var img0; // make img0 public so I can play with it in firebug more easily

</script>

<canvas id="c0"> 
    Your browser does not support the <canvas> element. Lame.
</canvas>]]></content:encoded>
    </item>
    <item>
      <title>HTML5 canvas RGB histogram</title>
      <link>http://mwcz.org/blog/2011/11/16/html5-canvas-rgb-histogram</link>
      <pubDate>Wed, 16 Nov 2011 17:25:00 EST</pubDate>
      <category><![CDATA[color]]></category>
      <category><![CDATA[canvas]]></category>
      <category><![CDATA[html5]]></category>
      <guid>b'oYZfsCpiKhrtj-0ttHmXZ6hyxFs='</guid>
      <description>HTML5 canvas RGB histogram</description>
      <content:encoded><![CDATA[<p>This is yet another demo from around 2009.  It's simple enough.  Click a button, draw an unbinned RGB histogram of the source image.</p>
<p>It's powered by an early version of an old JS toolkit I wrote called JSImage.  The latest version is available at my <a href="https://github.com/mwcz/jsimage">JSImage github repo</a>.  Don't be fooled by the 2011 commits, those are just artifacts from svn-&gt;git migration.  No guarantees that the histo's are actually correct. :)</p>
<script type="text/javascript" src="/js/003/JSImage.js"></script>

<script type="text/javascript">

window.onload = function() {

img0 = new JSImage( "c0", "/img/003/kazoo.png" );
    imgr = new JSImage( "cr", "/img/003/kazoo.png" );
    imgg = new JSImage( "cg", "/img/003/kazoo.png" );
    imgb = new JSImage( "cb", "/img/003/kazoo.png" );

}

function draw() {

/**
     * Color histo canvases the color of their histo
     */
    img0.histo( imgr.canvas, 'r', 'rgba(255,0,0,0.9)', 'rgba(0,0,0,0.8)' )
    img0.histo( imgg.canvas, 'g', 'rgba(0,200,0,0.9)', 'rgba(0,0,0,0.8)' )
    img0.histo( imgb.canvas, 'b', 'rgba(0,0,200,0.9)', 'rgba(0,0,0,0.8)' )

}

var img0, imgr, imgg, imgb; // make img0 public so I can play with it in firebug more easily

</script>

<p><canvas id="c0"> 
    Your browser does not support the <canvas> element. Lame.
</canvas> </p>
<p><button type="button" onclick="draw()">draw histograms</button> </p>
<p>Red:</p>
<p><canvas id="cr"> 
    Your browser does not support the <canvas> element. Lame.
</canvas> </p>
<p>Green:</p>
<p><canvas id="cg"> 
    Your browser does not support the <canvas> element. Lame.
</canvas> </p>
<p>Blue:</p>
<p><canvas id="cb"> 
    Your browser does not support the <canvas> element. Lame.
</canvas> </p>]]></content:encoded>
    </item>
    <item>
      <title>HTML5 canvas 3D pixel array</title>
      <link>http://mwcz.org/blog/2011/11/16/html5-canvas-3d-pixel-array</link>
      <pubDate>Wed, 16 Nov 2011 16:25:00 EST</pubDate>
      <category><![CDATA[color]]></category>
      <category><![CDATA[canvas]]></category>
      <category><![CDATA[html5]]></category>
      <guid>b'I0jDrs8tyrRaSux1v4ZtB2l7_dU='</guid>
      <description>HTML5 canvas 3D pixel array</description>
      <content:encoded><![CDATA[<p>This is another demo from 2009-ish.  When I started experimenting with canvas, I felt uncomfortable with the 1-dimensionality of <a href="https://developer.mozilla.org/en/DOM/CanvasPixelArray">CanvasPixelArray</a>.  I wrote this script to convert it into a more logical format: X by Y by RGBA.  Let me rephrase that.  By "more logical", I mean "more logical, <em>to me</em>, <em>at the time</em>).  1D is fine, and I can't think of any use for this script.  But, nonetheless, here it is, including the original description.</p>
<script type="text/javascript">

var c;
var cnvs;

window.onload = draw;

function draw() {

cnvs = document.getElementById("c");
    tmpl = document.getElementById("t");

if( cnvs.getContext) { // Check for canvas support

c = cnvs.getContext('2d');
        t = tmpl.getContext('2d');
        var color = document.getElementById("color");

var img = new Image();

img.onload = function() {
            cnvs.width = img.width;
            cnvs.height = img.height; // resize to fit image
            tmpl.width = img.width;
            tmpl.height = img.height; // resize to fit image
            c.drawImage( img, 0, 0 );
        }
        img.src = "/img/002/kazoo.png";

getpixelarray = function() {
            var pixarray = new Array();
            var imgdata = c.getImageData( 0, 0, cnvs.width, cnvs.height ).data;

/**
             * getImageData() returns a one-dimensional array where each element represents,
             * one subpixel.  So a full set of pixels looks like this:
             *
             *      (R, G, B, A, R, G, B, A, R, G, B, A, ...)
             *
             * Ugly, right?  Yeah.  So I'm translating them into a 2D array where the origin
             * (sadly) is at the top left.
             *
             * When doing the translation, I'm also starting at the bottom right, so there
             * only has to be ONE array enlarge operation each for the X and Y arrays.
             */

// build empty pix array.  we'll fill it later
            //console.time("build empty array");
            for( var x = cnvs.width-1; x >= 0; x-- ) {

pixarray[x] = new Array(); // insert new vertical array

for( var y = cnvs.height-1; y >= 0; y-- ) {

pixarray[x][y] = new Array(0,0,0,0);

}

}

/** 
             * Now we fill up the pix array with real values.
             * We don't REALLY need the alpha channel, but I'm including it
             * just in case a use arises for it in the future.  Likely.
             */

for( var i = 0; i < imgdata.length-3; i+=4 ) {
                var x = parseInt( parseInt(i/4) % ( cnvs.width ) );
                var y = parseInt( parseInt(i/4) / ( cnvs.width ) );

pixarray[x][y][0] = imgdata[i];
                pixarray[x][y][1] = imgdata[i+1];
                pixarray[x][y][2] = imgdata[i+2];
                pixarray[x][y][3] = imgdata[i+3];

}

for( var y = 0; y < cnvs.height; y++ ) { // loop over y
                for( var x = 0; x < cnvs.width; x++ ) { // loop over x
                    t.fillStyle = "rgba(" + pixarray[x][y][0] + "," + pixarray[x][y][1] + "," + pixarray[x][y][2] + "," + pixarray[x][y][3] + ")";
                    t.fillRect(x, y, 1, 1);
                }
            }

return pixarray;
        }

}

}

</script>

<h1>canvas pixarray</h1>
<p>After loading an image file into a &lt;canvas&gt; element, you can retrieve its pixels with getImageData().  The problem is that the array of pixels is one-dimensional.  The array would look something like this for a set of N pixels P<sub>i</sub> where each pixel has bands RGBA with values 0..255:</p>
<p>( P<sub>0R</sub>, P<sub>0G</sub>, P<sub>0B</sub>, P<sub>0A</sub>, P<sub>1R</sub>, P<sub>1G</sub>, P<sub>1B</sub>, P<sub>1A</sub>, ... , P<sub>(N-1)R</sub>, P<sub>(N-1)G</sub>, P<sub>(N-1)B</sub>, P<sub>(N-1)A</sub> )</p>
<p>That's really tough to work with, so this script converts that to a more logical 3D array (X by Y by RGBA)</p>
<p><input type="button" value="1D -> 3D pixel array" onclick="getpixelarray();" /&gt; </p>
<p>This canvas drawn from an image file:</p>
<p><canvas id="c" width="650" height="250"> 
    Your browser does not support the &lt;canvas&gt; element.
    Lame.
</canvas> </p>
<p>This canvas drawn from the 3D image array:</p>
<p><canvas id="t" width="650" height="250"> 
    Your browser does not support the &lt;canvas&gt; element.
    Lame.
</canvas> </p>]]></content:encoded>
    </item>
    <item>
      <title>HTML5 Canvas eyedropper</title>
      <link>http://mwcz.org/blog/2011/11/16/html5-canvas-eyedropper</link>
      <pubDate>Wed, 16 Nov 2011 15:25:00 EST</pubDate>
      <category><![CDATA[color]]></category>
      <category><![CDATA[canvas]]></category>
      <category><![CDATA[html5]]></category>
      <guid>b'x9pmDmYJATYT7fp0_Fqh-pgzzq0='</guid>
      <description>HTML5 Canvas eyedropper</description>
      <content:encoded><![CDATA[<style type="text/css"> 
    #color { height: 80px; width: 80px; margin: 20px; display: block; border: 1px solid black; }
    canvas { margin: 0 auto; }
</style>

<script type="text/javascript">

var c;
var cnvs;

window.onload = function() {

cnvs = document.getElementById("c");

if( cnvs.getContext) { // Check for canvas support
    // DRAW FUN STUFF!

c = cnvs.getContext('2d');
        var color = document.getElementById("color");
        var colorcode = document.getElementById("colorcode");

var img = new Image();

img.onload = function() {
            cnvs.width = img.width;cnvs.height = img.height; // resize to fit image
            c.drawImage( img, 0, 0 );
        }
        img.src = "/img/001/kazoo.png";

pixel = function(e) {

// find the element's position
            var x = 0;
            var y = 0;
            var o = cnvs;
            do {
                x += o.offsetLeft;
                y += o.offsetTop;
            } while (o = o.offsetParent);

x = e.pageX - x;
            y = e.pageY - y;
            var imgdata = c.getImageData( x, y, 1, 1 );
            var new_color = [ imgdata.data[0], imgdata.data[1], imgdata.data[2] ];
            color.style.background = "rgb("+new_color+")";
            colorcode.innerHTML = "rgb("+new_color+")";
        }

cnvs.onmousedown = function(e) {
            cnvs.onmousemove = pixel; // fire pixel() while user is dragging
            cnvs.onclick = pixel; // only so it will still fire if user doesn't drag at all
        }

cnvs.onmouseup = function() {
            cnvs.onmousemove = null;
        }

}

}

</script>

<p>This is an old demo I made of an <a href="http://en.wikipedia.org/wiki/Canvas_element">HTML5 canvas</a> eyedropper.  Circa 2009, I believe.  Just click and drag on the image to see it in action.</p>
<p><span id="color"></span>
<span id="colorcode"></span></p>
<p><canvas id="c">Sorry, in order to view this demo you need a Web browser that supports HTML5 canvas.</canvas></p>
<p>It's a pretty simple script, and works by declaring this function which handles onclick and ondrag events from the canvas.  cnvs is the canvas element, and c is the canvas's 2D rendering context object.</p>
<div class="pygments_murphy syntax_highlight"><pre><span class="nx">pixel</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span><br/>    <span class="c1">// calculate the x and y coordinates of the cursor</span><br/>    <span class="kd">var</span> <span class="nx">imgdata</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span><br/>    <span class="kd">var</span> <span class="nx">new_color</span> <span class="o">=</span> <span class="p">[</span> <span class="nx">imgdata</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><br/>                      <span class="nx">imgdata</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <br/>                      <span class="nx">imgdata</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">];</span><br/>    <span class="nx">color</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">background</span> <span class="o">=</span> <span class="s2">&quot;rgb(&quot;</span><span class="o">+</span><span class="nx">new_color</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">;</span><br/><span class="p">}</span><br/></pre></div>

<p>That's just a summary; the function actually does a little more than that.  Take a look at the source for this page if you're interested, and contact me if there are any questions.</p>]]></content:encoded>
    </item>
  </channel>
</rss>
